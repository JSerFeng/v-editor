{"code":"import { Modal } from \"antd\";\r\nvar SPACE = 20; /**参考线显示距离 */\r\nvar STICK_SPACE = 5; /**吸附距离 */\r\nexport var StickFlags;\r\n(function (StickFlags) {\r\n    StickFlags[StickFlags[\"STICK_ROW\"] = 1] = \"STICK_ROW\";\r\n    StickFlags[StickFlags[\"STICK_COL\"] = 2] = \"STICK_COL\";\r\n    StickFlags[StickFlags[\"NO_STICK\"] = 0] = \"NO_STICK\";\r\n})(StickFlags || (StickFlags = {}));\r\nexport var createRefLine = function (_a, others, stickTo, showSelf) {\r\n    var l = _a.x, width = _a.w, height = _a.h, t = _a.y;\r\n    if (stickTo === void 0) { stickTo = StickFlags.NO_STICK; }\r\n    var midX = l + width / 2;\r\n    var midY = t + height / 2;\r\n    var b = t + height;\r\n    var r = l + width;\r\n    var lines = [];\r\n    for (var _i = 0, others_1 = others; _i < others_1.length; _i++) {\r\n        var item = others_1[_i];\r\n        var x = item.x, y = item.y, w = item.w, h = item.h;\r\n        /**判断一下长或者宽是否相等 */\r\n        var equalWidth = false;\r\n        if (w === width) {\r\n            equalWidth = true;\r\n        }\r\n        var equalHeight = false;\r\n        if (h === height) {\r\n            equalHeight = true;\r\n        }\r\n        /**中线 */\r\n        var mX = w / 2 + x;\r\n        var mY = h / 2 + y;\r\n        var space = void 0;\r\n        /**水平中线和中线对齐 */\r\n        if ((space = Math.abs(mX - midX)) < SPACE) {\r\n            /**能吸附 */\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_ROW) {\r\n                l = equalWidth ? x : mX - width / 2;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([1, midX, 1]);\r\n            }\r\n            lines.push([1, mX, 0]);\r\n        }\r\n        /**垂直方向中线和中线对齐 */\r\n        if ((space = Math.abs(mY - midY)) < SPACE) {\r\n            /**能吸附 */\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_COL) {\r\n                t = equalHeight ? y : mY - height / 2;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([0, midY, 1]);\r\n            }\r\n            lines.push([0, mY, 0]);\r\n        }\r\n        /**左边和其它竖直中线对齐 */\r\n        if ((space = Math.abs(mX - l)) < SPACE) {\r\n            /**能吸附 */\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_ROW) {\r\n                l = mX;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([1, l, 1]);\r\n            }\r\n            lines.push([1, mX, 0]);\r\n        }\r\n        /**右边和其它竖直中线对齐 */\r\n        if ((space = Math.abs(l + width - mX)) < SPACE) {\r\n            /**能吸附 */\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_ROW) {\r\n                l = mX - width;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([1, l + width, 1]);\r\n            }\r\n            lines.push([1, mX, 0]);\r\n        }\r\n        /**顶部和其它水平中线对齐 */\r\n        if ((space = Math.abs(t - mY)) < SPACE) {\r\n            /**能吸附 */\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_ROW) {\r\n                t = mY;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([0, t, 1]);\r\n            }\r\n            lines.push([0, mY, 0]);\r\n        }\r\n        /**底部和其它水平中线对齐 */\r\n        if ((space = Math.abs(t + height - mY)) < SPACE) {\r\n            /**能吸附 */\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_ROW) {\r\n                t = mY - height;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([0, t + height, 1]);\r\n            }\r\n            lines.push([0, mY, 0]);\r\n        }\r\n        /**当前选择顶部，和其它顶部吸附 */\r\n        if ((space = Math.abs(t - y)) < SPACE) {\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_COL) {\r\n                t = y;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([0, t, 1]);\r\n            }\r\n            lines.push([0, y, 0]);\r\n        }\r\n        /**当前选择顶部，和其它底部吸附 */\r\n        if ((space = Math.abs(t - (y + h))) < SPACE) {\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_COL) {\r\n                t = y + h;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([0, t, 1]);\r\n            }\r\n            lines.push([0, y + h, 0]);\r\n        }\r\n        /**当前选择底部，和其它顶部吸附 */\r\n        if ((space = Math.abs(b - y)) < SPACE) {\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_COL) {\r\n                t = y - height;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([0, b, 1]);\r\n            }\r\n            lines.push([0, y, 0]);\r\n        }\r\n        /**当前选择底部，和其它底部吸附 */\r\n        if ((space = Math.abs(b - (y + h))) < SPACE) {\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_COL) {\r\n                t = y + h - height;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([0, b, 1]);\r\n            }\r\n            lines.push([0, y + h, 0]);\r\n        }\r\n        /**当前选择左边，和其它左边吸附 */\r\n        if ((space = Math.abs(l - x)) < SPACE) {\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_ROW) {\r\n                l = x;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([1, l, 1]);\r\n            }\r\n            lines.push([1, x, 0]);\r\n        }\r\n        /**当前选择左边，和其它右边吸附 */\r\n        if ((space = Math.abs(l - (x + w))) < SPACE) {\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_ROW) {\r\n                l = x + w;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([1, l, 1]);\r\n            }\r\n            lines.push([1, x + w, 0]);\r\n        }\r\n        /**当前选择右边，和其它左边吸附 */\r\n        if ((space = Math.abs(r - x)) < SPACE) {\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_ROW) {\r\n                l = x - width;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([1, r, 1]);\r\n            }\r\n            lines.push([1, x, 0]);\r\n        }\r\n        /**当前选择右边，和其它右边吸附 */\r\n        if ((space = Math.abs(r - (x + w))) < SPACE) {\r\n            if (space <= STICK_SPACE && stickTo & StickFlags.STICK_ROW) {\r\n                l = x + w - width;\r\n            }\r\n            else if (showSelf) {\r\n                lines.push([1, r, 1]);\r\n            }\r\n            lines.push([1, x + w, 0]);\r\n        }\r\n    }\r\n    return [lines, l, t];\r\n};\r\nexport var isUndef = function (target) {\r\n    return target === undefined || target === null;\r\n};\r\nvar confirm = Modal.confirm;\r\nexport function withConfirm(message, cb) {\r\n    confirm({\r\n        title: message,\r\n        onOk: cb,\r\n        okText: \"确认\",\r\n        cancelText: \"取消\"\r\n    });\r\n}\r\nexport function deepCopy(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n/**获取到屏幕左边的距离 */\r\nexport function getOffsetLeft(node) {\r\n    var offsetLeft = 0;\r\n    while (node && node.offsetLeft) {\r\n        offsetLeft += node.offsetLeft;\r\n        node = node.offsetParent;\r\n    }\r\n    return offsetLeft;\r\n}\r\n/**获取到屏幕上边的距离 */\r\nexport function getOffsetTop(node) {\r\n    var offsetTop = 0;\r\n    while (node && node.offsetTop) {\r\n        offsetTop += node.offsetTop;\r\n        node = node.offsetParent;\r\n    }\r\n    return offsetTop;\r\n}\r\n","references":["D:/PROJECT/v-editor/node_modules/antd/lib/index.d.ts"],"dts":{"name":"D:/PROJECT/v-editor/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/utils/index.d.ts","writeByteOrderMark":false,"text":"export declare enum StickFlags {\r\n    STICK_ROW = /**  */ 1,\r\n    STICK_COL = /**  */ 2,\r\n    NO_STICK = /**   */ 0\r\n}\r\nexport declare const createRefLine: ({ x: l, w: width, h: height, y: t }: {\r\n    x: number;\r\n    w: number;\r\n    h: number;\r\n    y: number;\r\n}, others: {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n}[], stickTo?: StickFlags, showSelf?: boolean | undefined) => [[number, number, number][], number, number];\r\nexport declare const isUndef: (target: unknown) => target is null | undefined;\r\nexport declare function withConfirm(message: string, cb: () => void): void;\r\nexport declare function deepCopy<T>(obj: T): T;\r\n/**获取到屏幕左边的距离 */\r\nexport declare function getOffsetLeft(node: HTMLElement | null): number;\r\n/**获取到屏幕上边的距离 */\r\nexport declare function getOffsetTop(node: HTMLElement | null): number;\r\n"}}
