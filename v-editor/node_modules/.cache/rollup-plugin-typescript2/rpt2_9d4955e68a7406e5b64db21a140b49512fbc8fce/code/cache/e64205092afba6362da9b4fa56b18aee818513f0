{"code":"import produce from 'immer';\r\nimport { deepCopy } from '../utils';\r\n/**最大撤销步数 */\r\nvar UNDO_LIMIT = 20;\r\nexport var Types;\r\n(function (Types) {\r\n    Types[\"RenderConfig\"] = \"RenderConfig\";\r\n    Types[\"SelectMultiple\"] = \"SelectMultiple\";\r\n    Types[\"SelectOne\"] = \"SelectOne\";\r\n    Types[\"AddItem\"] = \"AddItem\";\r\n    Types[\"WidgetConfig\"] = \"WidgetConfig\";\r\n    Types[\"ChangeCanvasWH\"] = \"ChangeCanvasWH\";\r\n    Types[\"StartWidgetChange\"] = \"StartWidgetChange\";\r\n    Types[\"ChangeWidgetPos\"] = \"ChangeWidgetPos\";\r\n    Types[\"CommitWidgetPosChange\"] = \"CommitWidgetPosChange\";\r\n    Types[\"DeleteItem\"] = \"DeleteItem\";\r\n    Types[\"CopySelected\"] = \"CopySelected\";\r\n    Types[\"ResetDraw\"] = \"ResetDraw\";\r\n    Types[\"ChangeWorkingPos\"] = \"ChangeWorkingPos\";\r\n    Types[\"Undo\"] = \"Undo\";\r\n    Types[\"Redo\"] = \"Redo\";\r\n    Types[\"MoveCanvasToCenter\"] = \"MoveCanvasToCenter\";\r\n    Types[\"SetInitCanvasPos\"] = \"SetInitCanvasPos\";\r\n    Types[\"SelectTools\"] = \"SelectTools\";\r\n})(Types || (Types = {}));\r\n/**编辑器可选择工具 */\r\nexport var Tools;\r\n(function (Tools) {\r\n    Tools[\"Drag\"] = \"Drag\";\r\n    Tools[\"Select\"] = \"Select\";\r\n})(Tools || (Tools = {}));\r\nvar AC = function (type, payload) { return ({ type: type, payload: payload }); };\r\nexport var EditorActions = {\r\n    actSelect: function (indexes) { return AC(Types.SelectMultiple, indexes); },\r\n    actSelectOne: function (idx) { return AC(Types.SelectOne, idx); },\r\n    actChangeCanvasWH: function (pos) { return AC(Types.ChangeCanvasWH, pos); },\r\n    actAddItem: function (config) { return AC(Types.AddItem, config); },\r\n    actWidgetConfig: function (config) { return AC(Types.WidgetConfig, config); },\r\n    actStartWidgetPos: function (initPos) { return AC(Types.StartWidgetChange, initPos); },\r\n    actChangeWidgetPos: function (deltaX, deltaY) { return AC(Types.ChangeWidgetPos, { deltaX: deltaX, deltaY: deltaY }); },\r\n    actCommitChangeWidgetPos: function (pos) { return AC(Types.CommitWidgetPosChange, pos); },\r\n    actDeleteItems: function () { return AC(Types.DeleteItem, null); },\r\n    actCopySelectedItems: function () { return AC(Types.CopySelected, null); },\r\n    actResetDraw: function () { return AC(Types.ResetDraw, null); },\r\n    actChangeWorkingPos: function (pos) { return AC(Types.ChangeWorkingPos, pos); },\r\n    actUndo: function () { return AC(Types.Undo, null); },\r\n    actRedo: function () { return AC(Types.Redo, null); },\r\n    actMoveCanvasToCenter: function () { return AC(Types.MoveCanvasToCenter, null); },\r\n    actSetInitCanvasPos: function (pos) { return AC(Types.SetInitCanvasPos, pos); },\r\n    actSelectTool: function (tool) { return AC(Types.SelectTools, tool); }\r\n};\r\nvar defaultConfig = {\r\n    widgets: [],\r\n    pos: { w: 400, h: 600 }\r\n};\r\nvar defaultBaseEditorState = {\r\n    workplace: {\r\n        renderConfig: defaultConfig,\r\n        selectedIndex: null,\r\n        canvas: {\r\n            x: 0,\r\n            y: 0,\r\n            scale: 1.0,\r\n            centerPosition: { x: 0, y: 0, scale: 1.0 },\r\n        },\r\n        selectArea: { x: 0, y: 0, w: 0, h: 0 },\r\n        undoStack: [],\r\n        redoStack: [],\r\n        selectedTool: null,\r\n        tmpPos: []\r\n    }\r\n};\r\nvar reducer = produce(function (state, action) {\r\n    var _a;\r\n    if (state === void 0) { state = defaultBaseEditorState; }\r\n    /**检查是否需要存入撤销栈 */\r\n    switch (action.type) {\r\n        case Types.Undo: {\r\n            var _b = state.workplace, renderConfig_1 = _b.renderConfig, selectArea_1 = _b.selectArea, selectedIndex_2 = _b.selectedIndex, selectedTool_1 = _b.selectedTool;\r\n            var memoState = state.workplace.undoStack.pop();\r\n            if (memoState) {\r\n                state.workplace.renderConfig = memoState.renderConfig;\r\n                state.workplace.selectedIndex = memoState.selectedIndex;\r\n                state.workplace.selectedTool = memoState.selectedTool;\r\n                state.workplace.selectArea = memoState.selectArea;\r\n                state.workplace.redoStack.push(deepCopy({\r\n                    renderConfig: renderConfig_1, selectArea: selectArea_1, selectedIndex: selectedIndex_2, selectedTool: selectedTool_1\r\n                }));\r\n                if (state.workplace.undoStack.length > UNDO_LIMIT) {\r\n                    state.workplace.undoStack.shift();\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        case Types.Redo: {\r\n            var _c = state.workplace, renderConfig_2 = _c.renderConfig, selectArea_2 = _c.selectArea, selectedIndex_3 = _c.selectedIndex, selectedTool_2 = _c.selectedTool;\r\n            var memoState = state.workplace.redoStack.pop();\r\n            if (memoState) {\r\n                state.workplace.renderConfig = memoState.renderConfig;\r\n                state.workplace.selectedIndex = memoState.selectedIndex;\r\n                state.workplace.selectedTool = memoState.selectedTool;\r\n                state.workplace.selectArea = memoState.selectArea;\r\n                state.workplace.undoStack.push(deepCopy({\r\n                    renderConfig: renderConfig_2, selectArea: selectArea_2, selectedIndex: selectedIndex_3, selectedTool: selectedTool_2\r\n                }));\r\n            }\r\n            return;\r\n        }\r\n        /**需要存状态的情况 */\r\n        case Types.CopySelected:\r\n        case Types.AddItem:\r\n        case Types.DeleteItem:\r\n        case Types.ResetDraw:\r\n        case Types.WidgetConfig:\r\n        case Types.StartWidgetChange:\r\n        case Types.CommitWidgetPosChange:\r\n            var _d = state.workplace, renderConfig = _d.renderConfig, selectArea = _d.selectArea, selectedIndex = _d.selectedIndex, selectedTool = _d.selectedTool;\r\n            state.workplace.undoStack.push(deepCopy({\r\n                renderConfig: renderConfig, selectArea: selectArea, selectedIndex: selectedIndex, selectedTool: selectedTool\r\n            }));\r\n            if (state.workplace.redoStack.length) {\r\n                state.workplace.redoStack.length = 0;\r\n                state.workplace.redoStack = [];\r\n            }\r\n    }\r\n    switch (action.type) {\r\n        case Types.SelectOne: {\r\n            var idx = action.payload;\r\n            if (idx !== null) {\r\n                if (((_a = state.workplace.selectedIndex) === null || _a === void 0 ? void 0 : _a.length) === 1 &&\r\n                    state.workplace.selectedIndex[0] === idx) {\r\n                    return;\r\n                }\r\n                state.workplace.selectedIndex = [idx];\r\n            }\r\n            else {\r\n                state.workplace.selectedIndex = null;\r\n            }\r\n            break;\r\n        }\r\n        case Types.SelectMultiple: {\r\n            var idxes = action.payload;\r\n            if (idxes) {\r\n                state.workplace.selectedIndex = idxes;\r\n            }\r\n            else {\r\n                state.workplace.selectedIndex = null;\r\n            }\r\n            break;\r\n        }\r\n        case Types.WidgetConfig: {\r\n            var indexes = state.workplace.selectedIndex;\r\n            if (!indexes || indexes.length !== 1)\r\n                return;\r\n            var idx = indexes[0];\r\n            state.workplace.renderConfig.widgets[idx] = action.payload;\r\n            break;\r\n        }\r\n        case Types.ChangeCanvasWH: {\r\n            state.workplace.renderConfig.pos = action.payload;\r\n            break;\r\n        }\r\n        case Types.StartWidgetChange: {\r\n            state.workplace.selectArea = action.payload;\r\n            state.workplace.tmpPos = state.workplace.renderConfig.widgets.map(function (item) { return item.pos; });\r\n            break;\r\n        }\r\n        case Types.ChangeWidgetPos: {\r\n            var _e = action.payload, deltaX = _e.deltaX, deltaY = _e.deltaY;\r\n            var _f = state.workplace, tmpPos = _f.tmpPos, widgets = _f.renderConfig.widgets, selectedIndex = _f.selectedIndex;\r\n            if (selectedIndex) {\r\n                for (var _i = 0, selectedIndex_1 = selectedIndex; _i < selectedIndex_1.length; _i++) {\r\n                    var index = selectedIndex_1[_i];\r\n                    widgets[index].pos.x = tmpPos[index].x + deltaX;\r\n                    widgets[index].pos.y = tmpPos[index].y + deltaY;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        case Types.CommitWidgetPosChange: {\r\n            state.workplace.selectArea = action.payload;\r\n            break;\r\n        }\r\n        case Types.AddItem: {\r\n            state.workplace.renderConfig.widgets.push(action.payload);\r\n            break;\r\n        }\r\n        case Types.DeleteItem: {\r\n            var indexes = void 0;\r\n            if ((indexes = state.workplace.selectedIndex)) {\r\n                indexes.sort(function (a, b) { return b - a; });\r\n                indexes.forEach(function (idx) {\r\n                    state.workplace.renderConfig.widgets.splice(idx, 1);\r\n                });\r\n            }\r\n            break;\r\n        }\r\n        case Types.CopySelected: {\r\n            var indexes = void 0;\r\n            if ((indexes = state.workplace.selectedIndex)) {\r\n                indexes.forEach(function (idx) {\r\n                    var widgets = state.workplace.renderConfig.widgets;\r\n                    var widget = widgets[idx];\r\n                    if (widget) {\r\n                        widgets.push(widget);\r\n                    }\r\n                });\r\n            }\r\n            break;\r\n        }\r\n        case Types.ResetDraw: {\r\n            state.workplace.selectedIndex = null;\r\n            state.workplace.renderConfig.widgets.length = 0;\r\n            state.workplace.renderConfig.widgets = [];\r\n            break;\r\n        }\r\n        case Types.ChangeWorkingPos: {\r\n            var _g = action.payload, x = _g.x, y = _g.y, scale = _g.scale;\r\n            state.workplace.canvas.x = x;\r\n            state.workplace.canvas.y = y;\r\n            state.workplace.canvas.scale = scale;\r\n            break;\r\n        }\r\n        case Types.SetInitCanvasPos: {\r\n            state.workplace.canvas.centerPosition = action.payload;\r\n            break;\r\n        }\r\n        case Types.MoveCanvasToCenter: {\r\n            var _h = state.workplace.canvas.centerPosition, x = _h.x, y = _h.y, scale = _h.scale;\r\n            state.workplace.canvas.x = x;\r\n            state.workplace.canvas.y = y;\r\n            state.workplace.canvas.scale = scale;\r\n            break;\r\n        }\r\n        case Types.SelectTools: {\r\n            state.workplace.selectedTool = action.payload;\r\n            break;\r\n        }\r\n    }\r\n}, defaultBaseEditorState);\r\nexport default reducer;\r\n","references":["D:/PROJECT/v-editor/node_modules/immer/dist/immer.d.ts","D:/PROJECT/v-editor/node_modules/redux/index.d.ts","D:/PROJECT/v-editor/src/render/interfaces.ts","D:/PROJECT/v-editor/node_modules/immer/dist/internal.d.ts","D:/PROJECT/v-editor/src/utils/index.ts"],"dts":{"name":"D:/PROJECT/v-editor/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/store/editorReducer.d.ts","writeByteOrderMark":false,"text":"import { Reducer } from 'redux';\r\nimport { RenderConfig, WidgetConfig } from '../render/interfaces';\r\nexport interface Pos {\r\n    w: number;\r\n    h: number;\r\n    x: number;\r\n    y: number;\r\n}\r\ndeclare type MemoState = Pick<BaseState[\"workplace\"], \"renderConfig\" | \"selectedIndex\" | \"selectArea\" | \"selectedTool\">;\r\nexport interface BaseState {\r\n    workplace: {\r\n        renderConfig: RenderConfig;\r\n        selectedIndex: number[] | null;\r\n        canvas: {\r\n            x: number;\r\n            y: number;\r\n            scale: number;\r\n            centerPosition: {\r\n                x: number;\r\n                y: number;\r\n                scale: number;\r\n            };\r\n        };\r\n        selectArea: Pos;\r\n        undoStack: MemoState[];\r\n        redoStack: MemoState[];\r\n        selectedTool: Tools | null;\r\n        tmpPos: Pos[]; /**暂存一些位置信息，用与多选在整体移动时，记住开始移动的位置 */\r\n    };\r\n}\r\nexport declare enum Types {\r\n    RenderConfig = \"RenderConfig\",\r\n    SelectMultiple = \"SelectMultiple\",\r\n    SelectOne = \"SelectOne\",\r\n    AddItem = \"AddItem\",\r\n    WidgetConfig = \"WidgetConfig\",\r\n    ChangeCanvasWH = \"ChangeCanvasWH\",\r\n    StartWidgetChange = \"StartWidgetChange\",\r\n    ChangeWidgetPos = \"ChangeWidgetPos\",\r\n    CommitWidgetPosChange = \"CommitWidgetPosChange\",\r\n    DeleteItem = \"DeleteItem\",\r\n    CopySelected = \"CopySelected\",\r\n    ResetDraw = \"ResetDraw\",\r\n    ChangeWorkingPos = \"ChangeWorkingPos\",\r\n    Undo = \"Undo\",\r\n    Redo = \"Redo\",\r\n    MoveCanvasToCenter = \"MoveCanvasToCenter\",\r\n    SetInitCanvasPos = \"SetInitCanvasPos\",\r\n    SelectTools = \"SelectTools\"\r\n}\r\n/**编辑器可选择工具 */\r\nexport declare enum Tools {\r\n    Drag = \"Drag\",\r\n    Select = \"Select\"\r\n}\r\nexport declare const EditorActions: {\r\n    actSelect: (indexes: number[] | null) => {\r\n        type: Types.SelectMultiple;\r\n        payload: number[] | null;\r\n    };\r\n    actSelectOne: (idx: number | null) => {\r\n        type: Types.SelectOne;\r\n        payload: number | null;\r\n    };\r\n    actChangeCanvasWH: (pos: {\r\n        w: number;\r\n        h: number;\r\n    }) => {\r\n        type: Types.ChangeCanvasWH;\r\n        payload: {\r\n            w: number;\r\n            h: number;\r\n        };\r\n    };\r\n    actAddItem: (config: WidgetConfig) => {\r\n        type: Types.AddItem;\r\n        payload: WidgetConfig;\r\n    };\r\n    actWidgetConfig: (config: WidgetConfig) => {\r\n        type: Types.WidgetConfig;\r\n        payload: WidgetConfig;\r\n    };\r\n    actStartWidgetPos: (initPos: Pos) => {\r\n        type: Types.StartWidgetChange;\r\n        payload: Pos;\r\n    };\r\n    actChangeWidgetPos: (deltaX: number, deltaY: number) => {\r\n        type: Types.ChangeWidgetPos;\r\n        payload: {\r\n            deltaX: number;\r\n            deltaY: number;\r\n        };\r\n    };\r\n    actCommitChangeWidgetPos: (pos: Pos) => {\r\n        type: Types.CommitWidgetPosChange;\r\n        payload: Pos;\r\n    };\r\n    actDeleteItems: () => {\r\n        type: Types.DeleteItem;\r\n        payload: null;\r\n    };\r\n    actCopySelectedItems: () => {\r\n        type: Types.CopySelected;\r\n        payload: null;\r\n    };\r\n    actResetDraw: () => {\r\n        type: Types.ResetDraw;\r\n        payload: null;\r\n    };\r\n    actChangeWorkingPos: (pos: {\r\n        x: number;\r\n        y: number;\r\n        scale: number;\r\n    }) => {\r\n        type: Types.ChangeWorkingPos;\r\n        payload: {\r\n            x: number;\r\n            y: number;\r\n            scale: number;\r\n        };\r\n    };\r\n    actUndo: () => {\r\n        type: Types.Undo;\r\n        payload: null;\r\n    };\r\n    actRedo: () => {\r\n        type: Types.Redo;\r\n        payload: null;\r\n    };\r\n    actMoveCanvasToCenter: () => {\r\n        type: Types.MoveCanvasToCenter;\r\n        payload: null;\r\n    };\r\n    actSetInitCanvasPos: (pos: {\r\n        x: number;\r\n        y: number;\r\n        scale: number;\r\n    }) => {\r\n        type: Types.SetInitCanvasPos;\r\n        payload: {\r\n            x: number;\r\n            y: number;\r\n            scale: number;\r\n        };\r\n    };\r\n    actSelectTool: (tool: Tools | null) => {\r\n        type: Types.SelectTools;\r\n        payload: Tools | null;\r\n    };\r\n};\r\nexport declare type GetActionTypes<A extends {\r\n    [k: string]: (...args: any[]) => {\r\n        type: Types;\r\n        payload: any;\r\n    };\r\n}> = {\r\n    [K in keyof A]: ReturnType<A[K]>;\r\n}[keyof A];\r\ndeclare const reducer: Reducer<BaseState, GetActionTypes<typeof EditorActions>>;\r\nexport default reducer;\r\n"}}
