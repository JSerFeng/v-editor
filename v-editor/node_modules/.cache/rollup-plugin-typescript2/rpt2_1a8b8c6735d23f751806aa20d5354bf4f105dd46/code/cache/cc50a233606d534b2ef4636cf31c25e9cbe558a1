{"code":"import { __assign } from \"tslib\";\r\nimport { deepCopy } from \"../utils\";\r\nvar WidgetsCenter = /** @class */ (function () {\r\n    function WidgetsCenter(initMap) {\r\n        if (initMap === void 0) { initMap = new Map(); }\r\n        this.widgetsMap = initMap;\r\n        this.subQueue = [];\r\n    }\r\n    WidgetsCenter.createConfig = function (info) {\r\n        var name = info.name, editorConfig = info.editorConfig, config = info.config, initPos = info.initPos;\r\n        return {\r\n            name: name, editorConfig: editorConfig, config: config, pos: initPos || { x: 10, y: 10, w: 60, h: 60 }\r\n        };\r\n    };\r\n    WidgetsCenter.prototype.use = function (widget) {\r\n        var description = widget.description, FC = widget.FC, Configuration = widget.Configuration;\r\n        this.widgetsMap.set(description.name, { FC: FC, description: description, Configuration: Configuration });\r\n        this.notify();\r\n    };\r\n    WidgetsCenter.prototype.notify = function () {\r\n        var all = this.getAll();\r\n        this.subQueue.forEach(function (cb) { return cb(all); });\r\n    };\r\n    WidgetsCenter.prototype.subscribe = function (cb) {\r\n        this.subQueue.push(cb);\r\n    };\r\n    WidgetsCenter.prototype.get = function (widgetConfig) {\r\n        var name;\r\n        if (typeof widgetConfig === \"string\") {\r\n            name = widgetConfig;\r\n        }\r\n        else {\r\n            name = widgetConfig.name;\r\n        }\r\n        return this.widgetsMap.get(name) || null;\r\n    };\r\n    WidgetsCenter.prototype.getAll = function () {\r\n        var widgets = [];\r\n        this.widgetsMap.forEach(function (v) { return widgets.push(v); });\r\n        return widgets;\r\n    };\r\n    WidgetsCenter.prototype.create = function (widgetName) {\r\n        var widget = this.widgetsMap.get(widgetName);\r\n        if (!widget)\r\n            return null;\r\n        widget.description = deepCopy(widget.description);\r\n        return __assign(__assign({}, widget.description), { pos: widget.description.initPos || { x: 10, y: 10, w: 60, h: 60 } });\r\n    };\r\n    return WidgetsCenter;\r\n}());\r\nexport default WidgetsCenter;\r\nvar defaultDescription = {\r\n    name: \"no-name\",\r\n    showName: \"未命名\",\r\n    snapShot: \"\",\r\n    version: \"*\",\r\n    editorConfig: [],\r\n    config: {},\r\n    initPos: { x: 0, y: 0, w: 80, h: 80 },\r\n    style: {},\r\n    description: \"无描述\"\r\n};\r\nexport var createPkg = function (Comp, options, Configuration) {\r\n    options = __assign(__assign({}, defaultDescription), options);\r\n    if (Configuration) {\r\n        return {\r\n            FC: Comp,\r\n            Configuration: Configuration,\r\n            description: options\r\n        };\r\n    }\r\n    return {\r\n        FC: Comp,\r\n        description: options\r\n    };\r\n};\r\n","references":["D:/PROJECT/v-editor/src/utils/index.ts","D:/PROJECT/v-editor/src/render/interfaces.ts"],"dts":{"name":"D:/PROJECT/v-editor/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/render/WidgetsCenter.d.ts","writeByteOrderMark":false,"text":"import { ReactComp, WidgetConfig, WidgetConfigProp, WidgetDescription, WidgetPackage, WidgetProps } from \"./interfaces\";\r\ndeclare type WidgetsMap = Map<string, WidgetPackage>;\r\ndeclare class WidgetsCenter {\r\n    widgetsMap: WidgetsMap;\r\n    subQueue: ((...args: any[]) => any)[];\r\n    constructor(initMap?: WidgetsMap);\r\n    static createConfig(info: WidgetDescription): {\r\n        name: string;\r\n        editorConfig: ({\r\n            key: string;\r\n            name: string;\r\n            type: import(\"./interfaces\").EditorTypes.Color;\r\n        } | {\r\n            key: string;\r\n            name: string;\r\n            type: import(\"./interfaces\").EditorTypes.Upload;\r\n            options: Record<string, any>;\r\n        } | {\r\n            key: string;\r\n            name: string;\r\n            type: import(\"./interfaces\").EditorTypes.Text;\r\n        } | {\r\n            key: string;\r\n            name: string;\r\n            type: import(\"./interfaces\").EditorTypes.Number;\r\n        } | {\r\n            key: string;\r\n            name: string;\r\n            type: import(\"./interfaces\").EditorTypes.Select;\r\n            options: {\r\n                label: string;\r\n                value: string;\r\n            }[];\r\n        })[];\r\n        config: Record<string, any>;\r\n        pos: import(\"./interfaces\").Pos;\r\n    };\r\n    use(widget: WidgetPackage): void;\r\n    notify(): void;\r\n    subscribe(cb: (all: WidgetPackage[]) => any): void;\r\n    get(widgetConfig: WidgetConfig | string): WidgetPackage | null;\r\n    getAll(): WidgetPackage[];\r\n    create(widgetName: string): WidgetConfig | null;\r\n}\r\nexport default WidgetsCenter;\r\nexport declare const createPkg: (Comp: ReactComp<WidgetProps>, options: WidgetDescription, Configuration?: ReactComp<WidgetConfigProp> | undefined) => WidgetPackage;\r\n"}}
