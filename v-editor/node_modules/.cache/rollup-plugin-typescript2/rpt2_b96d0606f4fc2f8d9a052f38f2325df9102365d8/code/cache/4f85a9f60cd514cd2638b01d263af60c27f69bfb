{"code":"import { __assign } from \"tslib\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport produce from \"immer\";\r\nimport { memo, useRef } from \"react\";\r\nimport { EditorTypes } from \"../../../render/interfaces\";\r\nimport { EditorActions } from \"../../../store/editorReducer\";\r\nimport { ChromePicker } from \"react-color\";\r\nimport { Button, TextField, RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\r\nimport NumberText from \"../../../components/NumberText\";\r\nvar actWidgetConfig = EditorActions.actWidgetConfig;\r\nvar SingleConfig = function (_a) {\r\n    var _b;\r\n    var widgetConfig = _a.widgetConfig, dispatch = _a.dispatch, CustomConfig = _a.CustomConfig;\r\n    var defaultConfig = useRef(widgetConfig.config);\r\n    if (widgetConfig.editorConfig === null ||\r\n        widgetConfig.config === null) {\r\n        return _jsx(\"div\", { children: \"\\u65E0\\u53EF\\u914D\\u7F6E\\u9009\\u9879\" }, void 0);\r\n    }\r\n    var dispatchProperty = function (key, value) {\r\n        dispatch(actWidgetConfig(produce(widgetConfig, function (it) {\r\n            it.config[key] = value;\r\n        })));\r\n    };\r\n    return (_jsx(\"div\", { children: widgetConfig.editorConfig.length === 0\r\n            ? _jsx(\"div\", { children: \"\\u7EC4\\u4EF6\\u6CA1\\u6709\\u53EF\\u914D\\u7F6E\\u9879\" }, void 0)\r\n            : _jsxs(\"div\", { children: [_jsxs(\"div\", { children: [\"\\u5C42\\u7EA7\", _jsx(NumberText, { placeholder: \"\\u5C42\\u7EA7\", value: Number(((_b = widgetConfig.style) === null || _b === void 0 ? void 0 : _b.zIndex) || 0), onChange: function (zIdx) {\r\n                                    dispatch(actWidgetConfig(produce(widgetConfig, function (it) {\r\n                                        if (!it.style) {\r\n                                            it.style = { zIndex: 0 };\r\n                                        }\r\n                                        it.style.zIndex = zIdx;\r\n                                    })));\r\n                                } }, void 0)] }, void 0),\r\n                    widgetConfig.editorConfig.map(function (editorConfig, i) {\r\n                        var name = editorConfig.name, key = editorConfig.key;\r\n                        return _jsxs(\"div\", { children: [_jsx(\"div\", { children: name }, void 0),\r\n                                _jsx(\"div\", { children: getConfig(editorConfig, widgetConfig.config[key], dispatchProperty.bind(null, key)) }, void 0)] }, key);\r\n                    }),\r\n                    CustomConfig && _jsx(CustomConfig, { widgetConfig: widgetConfig, dispatchConfig: function (newWidgetConfig) {\r\n                            dispatch(actWidgetConfig(newWidgetConfig));\r\n                        } }, void 0),\r\n                    _jsx(Button, __assign({ onClick: function () {\r\n                            dispatch(actWidgetConfig(produce(widgetConfig, function (it) {\r\n                                it.config = defaultConfig.current;\r\n                            })));\r\n                        }, color: \"secondary\", variant: \"contained\" }, { children: \"\\u91CD\\u7F6E\" }), void 0)] }, void 0) }, void 0));\r\n};\r\nfunction getConfig(config, value, setProperty) {\r\n    switch (config.type) {\r\n        case EditorTypes.Color:\r\n            return _jsx(ChromePicker, { color: value, onChangeComplete: function (color) {\r\n                    setProperty(color.hex);\r\n                } }, void 0);\r\n        case EditorTypes.Text:\r\n            return _jsx(TextField, { multiline: true, value: value, onChange: function (e) {\r\n                    setProperty(e.target.value);\r\n                } }, void 0);\r\n        case EditorTypes.Number:\r\n            return _jsx(TextField, { value: value, onChange: function (e) {\r\n                    setProperty(e.target.value);\r\n                } }, void 0);\r\n        case EditorTypes.Select:\r\n            return _jsx(\"div\", { children: _jsx(RadioGroup, __assign({ value: value, onChange: function (e) { setProperty(e.target.value); } }, { children: config.options.map(function (_a) {\r\n                        var label = _a.label, value = _a.value;\r\n                        return (_jsx(FormControlLabel, { control: _jsx(Radio, {}, void 0), label: label, value: value }, value));\r\n                    }) }), void 0) }, void 0);\r\n        default: return null;\r\n    }\r\n}\r\nexport default memo(SingleConfig);\r\n","references":["D:/PROJECT/v-editor/node_modules/immer/dist/immer.d.ts","D:/PROJECT/v-editor/node_modules/@types/react/index.d.ts","D:/PROJECT/v-editor/node_modules/redux/index.d.ts","D:/PROJECT/v-editor/src/render/interfaces.ts","D:/PROJECT/v-editor/src/store/editorReducer.ts","D:/PROJECT/v-editor/node_modules/@types/react-color/index.d.ts","D:/PROJECT/v-editor/node_modules/@material-ui/core/index.d.ts","D:/PROJECT/v-editor/src/components/NumberText.tsx"],"dts":{"name":"D:/PROJECT/v-editor/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/pages/work-place/operators/SingleConfig.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { Dispatch as ReduxDispatch } from \"redux\";\r\nimport { ReactComp, WidgetConfig, WidgetConfigProp } from \"../../../render/interfaces\";\r\ndeclare const _default: import(\"react\").NamedExoticComponent<{\r\n    widgetConfig: WidgetConfig;\r\n    dispatch: ReduxDispatch<import(\"redux\").AnyAction>;\r\n    CustomConfig?: ReactComp<WidgetConfigProp> | null | undefined;\r\n}>;\r\nexport default _default;\r\n"}}
