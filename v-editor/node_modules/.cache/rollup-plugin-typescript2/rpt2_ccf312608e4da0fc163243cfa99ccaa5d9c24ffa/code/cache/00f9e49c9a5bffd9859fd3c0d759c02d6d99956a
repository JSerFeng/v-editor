{"code":"export var EditorTypes;\r\n(function (EditorTypes) {\r\n    EditorTypes[\"Color\"] = \"Color\";\r\n    EditorTypes[\"Upload\"] = \"Upload\";\r\n    EditorTypes[\"Text\"] = \"Text\";\r\n    EditorTypes[\"Number\"] = \"Number\";\r\n    EditorTypes[\"Select\"] = \"Select\";\r\n})(EditorTypes || (EditorTypes = {}));\r\n","references":["D:/PROJECT/v-editor/node_modules/@types/react/index.d.ts","D:/PROJECT/v-editor/src/utils/eventEmitter.ts"],"dts":{"name":"D:/PROJECT/v-editor/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/render/interfaces.d.ts","writeByteOrderMark":false,"text":"import { ComponentClass, CSSProperties, FC } from \"react\";\r\nimport EventEmitter from \"../utils/eventEmitter\";\r\nexport declare enum EditorTypes {\r\n    Color = \"Color\",\r\n    Upload = \"Upload\",\r\n    Text = \"Text\",\r\n    Number = \"Number\",\r\n    Select = \"Select\"\r\n}\r\nexport declare type EditorConfig<T extends EditorTypes = EditorTypes> = T extends EditorTypes.Number | EditorTypes.Text | EditorTypes.Color ? {\r\n    key: string;\r\n    name: string;\r\n    type: T;\r\n} : {\r\n    key: string;\r\n    name: string;\r\n    type: T;\r\n    options: T extends EditorTypes.Select ? {\r\n        label: string;\r\n        value: string;\r\n    }[] : T extends EditorTypes.Upload ? Record<string, any> : never;\r\n};\r\nexport declare type ReactComp<T> = FC<T> | ComponentClass<T>;\r\nexport interface Pos {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n}\r\nexport interface WidgetConfig {\r\n    name: string;\r\n    editorConfig: EditorConfig[];\r\n    config: Record<string, any>;\r\n    pos: Pos;\r\n    style?: Partial<CSSProperties>;\r\n}\r\nexport interface RenderConfig {\r\n    widgets: WidgetConfig[];\r\n    pos: {\r\n        w: number;\r\n        h: number;\r\n    };\r\n}\r\nexport interface WidgetDescription {\r\n    name: string;\r\n    version?: string;\r\n    showName: string;\r\n    editorConfig: EditorConfig[];\r\n    config: Record<string, any>;\r\n    initPos?: Pos;\r\n    style?: Partial<CSSProperties>;\r\n    snapShot?: string;\r\n    description?: string;\r\n}\r\nexport interface WidgetProps<T = any> {\r\n    config: T;\r\n    pos: Pos;\r\n    style?: Partial<CSSProperties>;\r\n    eventPool?: EventEmitter;\r\n}\r\nexport interface WidgetConfigProp {\r\n    widgetConfig: WidgetConfig;\r\n    dispatchConfig: (widgetConfig: WidgetConfig) => void;\r\n}\r\nexport interface WidgetPackage {\r\n    FC: ReactComp<WidgetProps>;\r\n    description: WidgetDescription;\r\n    Configuration?: ReactComp<WidgetConfigProp>;\r\n}\r\nexport declare type TransformConfig<T> = T extends Array<infer Item> ? Item extends {\r\n    key: infer Key;\r\n} ? Key extends string ? {\r\n    [P in Key]: any;\r\n} : {} : {} : T;\r\n"}}
